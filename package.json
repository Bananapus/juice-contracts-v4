{
  "name": "@jbx-protocol/juice-contracts-v4",
  "bugs": "https://github.com/bananapus/juice-contracts-v4/issues",
  "repository": {
    "type": "git",
    "url": "https://github.com/bananapus/juice-contracts-v4"
  },
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "test": "yarn test:local && yarn test:fork && yarn test:unit",
    "test:unit": "yarn clean && hardhat compile && mocha './test/**/*.test.js' -r esm --bail --timeout 20000 && yarn clean",
    "test:local": "forge test",
    "test:fork": "FOUNDRY_PROFILE=CI forge test",
    "coverage": "node --require esm ./node_modules/.bin/hardhat coverage --network hardhat",
    "coverage:integration": "forge coverage --match-path ./src/*.sol --report lcov --report summary",
    "build": "forge build",
    "size": "forge build --sizes",
    "clean": "rm -rf ./cache && rm -rf ./artifacts",
    "doc": "forge doc",
    "tree": "forge tree",
    "lint": "forge fmt",
    "deploy:ethereum-mainnet": "source .env && forge script DeployEthereumMainnet --chain-id 1 --rpc-url $RPC_ETHEREUM_MAINNET --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_ETHEREUM_MAINNET -vvv",
    "deploy:ethereum-goerli": "source .env && forge script DeployGoerli --chain-id 5 --rpc-url $RPC_ETHEREUM_GOERLI --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_ETHEREUM_GOERLI -vvv",
    "deploy:ethereum-sepolia": "source .env && forge script DeploySepolia --chain-id 5 --rpc-url $RPC_ETHEREUM_SEPOLIA --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_ETHEREUM_SEPOLIA -vvv",
    "deploy:optimism-mainnet": "source .env && forge script DeployOptimismMainnet --chain-id 1 --rpc-url $RPC_OPTIMISM_MAINNET --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_OPTIMISM_MAINNET -vvv",
    "deploy:optimism-testnet": "source .env && forge script DeployOptimismTestnet --chain-id 1 --rpc-url $RPC_OPTIMISM_TESTNET --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_OPTIMISM_TESTNET -vvv",
    "deploy:polygon-mainnet": "source .env && forge script DeployPolygonMainnet --chain-id 1 --rpc-url $RPC_POLYGON_MAINNET --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_POLYGON_MAINNET -vvv",
    "deploy:polygon-mumbai": "source .env && forge script DeployPolygonMumbai --chain-id 1 --rpc-url $RPC_POLYGON_MUMBAI --broadcast --verify --etherscan-api-key $ETHERSCAN_API_KEY --ledger --sender $SENDER_POLYGON_MUMBAI -vvv"
  }
}